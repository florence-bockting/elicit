[global]
model_id = "binom_01"                                             # (STR)
method = "parametric_prior"                                       # prior elicitation variant (STR: 'parametric_prior', 'deep_prior')
B = 256                                                           # batch size (INT)
rep = 200                                                         # number of simulations from priors (INT)
log_info = 0                                                      # feedback behavior wrt. logging messages (INT, 0-no messages, 1-H1 messages, 2-H1 & H2 messages, etc.)
validation = True
view_ep = 1


[design matrix specifications]
scaling = "standardize"                                           # scaling of cont. predictor (STR: divide_by_std, standardize)
select_obs = [0, 5, 10, 15, 20, 25, 30]                           # indices of selected observations from design matrix (LIST: [indices for obs])


[model parameters]
name_param = ["beta_0", "beta_1"]                                 # name of model parameters (LIST with STR, lenght of list must equal number of model parameters)
true = [tfd.Normal(-0.51, 0.06), tfd.Normal(0.26, 0.04)]          # only necessary if validation = True; ground truth for model validation if desired

[model parameters parametric prior]
name_hyperparam = [("mu0", "sigma0"),("mu1", "sigma1")]           # name of hyperparameters if prior distr. family is specified (order must be equal to order in distribution i.e. param1, param2 -> distribution(param1, param2)) 
family = [tfd.Normal, tfd.Normal]                                 # prior distribution family per model parameter  (either function e.g. tfd.Normal or string with name that corresp. to func in config_custom_functions.py; must start with 'custom_')
initialization = [(tfd.Uniform(0.,1.), tfd.Uniform(0.,0.5)), 
                  (tfd.Uniform(0.,1.), tfd.Uniform(0.,0.5))]      # initialization of hyperparameter values
#-2.5,-3.5
[model parameters deep prior]
coupling_design = "spline"                                        # STR: affine, spline
units = 128
activation_function = "softplus"                                  # STR: "softplus" ,"relu", "elu"
kernel_regularizer = None                                         # None, tf.keras.regularizers.l2(1e-4)
hidden_layers = 2
dropout = False
bins = 16                                                         # only necessary if coupling_design = spline; 
num_coupling_layers = 8
permutation = "fixed"


[target quantities and elicitation techniques]
target = ["ypred", "param_cor"]                         
elicitation = ["quantiles", "histogram"]                                        # quantiles, histogram, moments
quantiles_specs = [(10, 20, 30, 40, 50, 60, 70, 80, 90),None]           # example: (10, 20, 30, 40, 50, 60, 70, 80, 90)
moments_specs = [None, None]                                             # example: ("mean", "sd")
custom_target_functions = [None, "custom_cor"]                                   # function name as STR as specified in config_custom_targets.py


[prior sampling specifications]
scale_prior_samples = [1,1]


[generative model additional input]
total_count = 31
[generative model softmax gumbel]
temperature = 1.
upper_threshold = 31


[loss specification]
combine_loss = ["by-group", "all"]                                     # by-group, by-stats, all
loss_function = "MMD_energy"
task_balance_factor = 1.6                                       # temperature of dynamic weight averaging algo. 


[training]
epochs = 200
clipnorm_value = 1.
learning_rate_decay = True
init_learning_rate = 0.01
learning_rate_step = 7
learning_rate_percentage = 0.8
learning_rate_minimum = 0.00001

[saving settings]
save_to_path = "data/"
custom_saving_functions = ["save_hyperparameters"]